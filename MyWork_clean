161130 Briner
Due on Dec. 10th, 2016


ssh jbriner@hpc.oit.uci.edu

wget -O - http://ftp.flybase.net/genomes/Drosophila_melanogaster/current/fasta/dmel-all-chromosome-r6.13.fasta.gz "/data/users/jbriner/dmel-all-chromosome-r6.13.fasta" \
| gunzip dmel-all-chromosome-r6.13.fasta \
| less


#----------------------------------------

#Print a summary report: total number of (nucelotides, Ns, sequences)


#1. Total number of sequences
    #Since each sequence is prefaced by a header, search for the number of times a header-specific string occurs:
    grep "species=Dmel" -o dmel-all-chromosome-r6.13.fasta | wc -l 
        #Output = 1870


#2. Exclude the header(s) and create a new, headerless fasta file
    #This deletes all the characters from ">" to the end of the line, then creates a new file
    sed 's/>.*$//' dmel-all-chromosome-r6.13.fasta > dmel-all-chromosome-r6.13.2.fasta


#3. Total number of nucleotides (A,C,T,G) in headerless file
    egrep "A|C|T|G" -o dmel-all-chromosome-r6.13.2.fasta | wc -l
        #Output (headerless file) = 142573024


#4. Total number of Ns (unknown bases) in headerless file
    grep N -o dmel-all-chromosome-r6.13.2.fasta | wc -l
        #Output (headerless file) = 1152978


#----------------------------------------------

#Print a summary report: total number of (nucelotides, Ns, sequences), but now for sequence data split into two parts: > 100kb and < 100kb

	module load jje/kent/2014.02.19
	mydata = /data/users/jbriner/ee282/dmel-all-chromosome-r6.13.fasta	
	less -N -S $mydata
	echo $mydata #check

#Filter sequences that are LESS than 100000 nucleotides long
	
	faSize mydata 	#print the total base count in fa files

	outname = ~/dmel_filteredless
	faFilter -minSize=10000 $mydata /dev/stdout \
	| tee $outname.fa \		#writes output file
	| faSize -detailed /dev/stdin \		#evaluate the size of nucleotides in the file
	| sort -rnk 2,2 \  	#Sort. -rnk reverse numeric kolumns. 2,2 = start, end ls -l $outname.facolumns
	> $outname.sizes

ls -l $outname.fa
ls -lhH $outname.fa $infile
faFiler -miniSize=100000 $infile /dev/stdout | $outname.fa #filter by size



bioawk -c fastx length($seq) > 100000 {print ">" $name "\n\"} | faSize /dev/stdin



#Now print summary plots for the same stuff
#------------------------------------------

#1. Sequence length distribution

	bioawk {print length($seq)}


#2. Sequence GC% distribution

	#Get the %GC from FASTA. Ignore N's. 
	awk -c fastx '{ print ">"$name; print gc($seq) }' seq.fa.gz


#3. Cumulative genome size sorted from largest to smallest sequences


#4. R Script to make histogram



#----------------------------------------

uniq -c #counts number of unique
sort by column 1 and do the reverse: puts the most common first

#ggplot to command line utilities: template
plot cdf2

bioawk
sort based on length
on begin, print header
print the rest of the line




#161130 - JJ's script for extract, transform, label
#-------------------------------------------------
assembly1 = whatever.fasta
assembly2 = whatever2.fasta

bioawk -c fastx ' {print length($seq) "\tassembly1\" } '$assembly1 \
| sort -rnk1,1 \
| awk ' BEGIN {print "Length/tAssembly" } {print} ' \
> assembly1.lengths.txt

bioawk -c fastx ' {print length($seq) "\tassembly2\" } '$assembly2 \
| sort -rnk1,1 \
| awk ' BEGIN {print "Length/tAssembly" } {print} ' \
> assembly2.lengths.txt


plotCDF2 assembly{1,2}.lengths.txt assembly.CDF.png

less 'which plotCDF2'

