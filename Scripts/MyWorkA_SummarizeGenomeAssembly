#!/bin/bash

#(F16) Informatics
#161130 Briner

#A) Summarize a genome assembly

#Setting up: get file, load modules

wget -O - /data/users/jbriner/ee282/dmel-all-chromosome-r6.13.fasta ftp://ftp.flybase.net/genomes/Drosophila_melanogaster/current/fasta/dmel-all-chromosome-r6.13.fasta.gz \
| gunzip dmel-all-chromosome-r6.13.fasta \
| less

module load jje/kent/2014.02.19 | module load jje/jjeutils


#----------------------------------------------
#Print a summary report: total number of (nucelotides, Ns, sequences)	[DONE]
#----------------------------------------------

	#1. Total number of sequences
		#Since each sequence is prefaced by a header, search for the number of times a header-specific string occurs:
		grep "species=Dmel" -o dmel-all-chromosome-r6.13.fasta | wc -l 
		    #Output (headered file) = 1870


	#2. Exclude the header(s) and create a new, headerless fasta file
		#This deletes all the characters from ">" to the end of the line, then creates a new file
		sed 's/>.*$//' dmel-all-chromosome-r6.13.fasta > dmel-all-chromosome-r6.13.2.fasta


	#3. Total number of nucleotides (A,C,T,G) in headerless file
		egrep "A|C|T|G" -o dmel-all-chromosome-r6.13.2.fasta | wc -l
		    #Output (headerless file) = 142573024


	#4. Total number of Ns (unknown bases) in headerless file
		grep N -o dmel-all-chromosome-r6.13.2.fasta | wc -l
		    #Output (headerless file) = 1152978


#----------------------------------------------
#Print a summary report: total number of (nucelotides, Ns, sequences), but now for sequence data split into two parts: > 100kb and < 100kb	[DONE]
#----------------------------------------------

	#0. Working with the original headered file again.

	dmel_fasta=dmel-all-chromosome-r6.13.fasta 	#giving this a nickname	
	less -N -S $dmel_fasta
	echo $dmel_fasta 	#check that nickname points to birth name

	faSize $dmel_fasta 	#Prints the total base count


#1. Filter sequences that are LESS than (or = to) 100000 nucleotides long: set ceiling with maxSize
 
	faFilter -maxSize=100000 $dmel_fasta dmel_fasta_less \
	| faSize dmel_fasta_less 	#confirm size filter worked
	
	#Print summary reports 
		faSize dmel_fasta_less		#Total no. sequences: 1863
		sed 's/>.*$//' dmel_fasta_less > dmel_fasta_less_behead 	#Strip headers
		egrep "A|C|T|G" -o dmel_fasta_less_behead | wc -l 	#Total no. nucleotides: 5515449
		grep N -o dmel_fasta_less_behead | wc -l	#Total no. Ns: 662593


#2. Filter sequences MORE than (or = to) 100000 nucleotides long: set floor with minSize

	faFilter -minSize=100000 $dmel_fasta dmel_fasta_more

	#Print summary reports 
		faSize dmel_fasta_more		#Total no. sequences: 7		
		sed 's/>.*$//' dmel_fasta_more > dmel_fasta_more_behead 	#Strip headers
		egrep "A|C|T|G" -o dmel_fasta_more_behead | wc -l 	#Total no. nucleotides: 137057575
		grep N -o dmel_fasta_more_behead | wc -l	#Total no. Ns: 490385

	


#----------------------------------------------
#Now print summary plots for the same stuff on the original, unsplit sequence data
#----------------------------------------------

#See R script “MyWorkA_SummarizeGenomeAssembly_Plots.R” for the plotting details. I’m just prepping data files here.


#1. Sequence length distribution

	bioawk -c fastx '{ print $name, length($seq) }' $dmel_fasta > dmel_fasta_seqlength


#2. Sequence GC% distribution. Ignore N's. 

	bioawk -c fastx '{ print $name, gc($seq) }' $dmel_fasta > dmel_fasta_GC


#3. Cumulative genome size sorted from largest to smallest sequences

	





#----------------------------------------

uniq -c #counts number of unique
sort by column 1 and do the reverse: puts the most common first

#ggplot to command line utilities: template
plot cdf2

bioawk
sort based on length
on begin, print header
print the rest of the line




#161130 - JJ's script for extract, transform, label
#-------------------------------------------------
assembly1 = whatever.fasta
assembly2 = whatever2.fasta

bioawk -c fastx ' {print length($seq) "\tassembly1\" } '$assembly1 \
| sort -rnk1,1 \
| awk ' BEGIN {print "Length/tAssembly" } {print} ' \
> assembly1.lengths.txt

bioawk -c fastx ' {print length($seq) "\tassembly2\" } '$assembly2 \
| sort -rnk1,1 \
| awk ' BEGIN {print "Length/tAssembly" } {print} ' \
> assembly2.lengths.txt


plotCDF2 assembly{1,2}.lengths.txt assembly.CDF.png

less 'which plotCDF2'

